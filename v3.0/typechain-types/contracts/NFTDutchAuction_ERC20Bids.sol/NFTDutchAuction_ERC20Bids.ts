/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface NFTDutchAuction_ERC20BidsInterface extends utils.Interface {
  functions: {
    "auctionClosed()": FunctionFragment;
    "auctionEnd()": FunctionFragment;
    "auction_winner()": FunctionFragment;
    "bid(uint256)": FunctionFragment;
    "closeAuction()": FunctionFragment;
    "currentPrice()": FunctionFragment;
    "erc20TokenAddress()": FunctionFragment;
    "erc721TokenAddress()": FunctionFragment;
    "initialPrice()": FunctionFragment;
    "seller()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctionClosed"
      | "auctionEnd"
      | "auction_winner"
      | "bid"
      | "closeAuction"
      | "currentPrice"
      | "erc20TokenAddress"
      | "erc721TokenAddress"
      | "initialPrice"
      | "seller"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctionClosed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auction_winner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20TokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc721TokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "seller", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "auctionClosed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctionEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auction_winner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20TokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721TokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seller", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NFTDutchAuction_ERC20Bids extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTDutchAuction_ERC20BidsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctionClosed(overrides?: CallOverrides): Promise<[boolean]>;

    auctionEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    auction_winner(overrides?: CallOverrides): Promise<[string]>;

    bid(
      _bidAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    erc20TokenAddress(overrides?: CallOverrides): Promise<[string]>;

    erc721TokenAddress(overrides?: CallOverrides): Promise<[string]>;

    initialPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    seller(overrides?: CallOverrides): Promise<[string]>;
  };

  auctionClosed(overrides?: CallOverrides): Promise<boolean>;

  auctionEnd(overrides?: CallOverrides): Promise<BigNumber>;

  auction_winner(overrides?: CallOverrides): Promise<string>;

  bid(
    _bidAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeAuction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentPrice(overrides?: CallOverrides): Promise<BigNumber>;

  erc20TokenAddress(overrides?: CallOverrides): Promise<string>;

  erc721TokenAddress(overrides?: CallOverrides): Promise<string>;

  initialPrice(overrides?: CallOverrides): Promise<BigNumber>;

  seller(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    auctionClosed(overrides?: CallOverrides): Promise<boolean>;

    auctionEnd(overrides?: CallOverrides): Promise<BigNumber>;

    auction_winner(overrides?: CallOverrides): Promise<string>;

    bid(
      _bidAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    closeAuction(overrides?: CallOverrides): Promise<void>;

    currentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    erc20TokenAddress(overrides?: CallOverrides): Promise<string>;

    erc721TokenAddress(overrides?: CallOverrides): Promise<string>;

    initialPrice(overrides?: CallOverrides): Promise<BigNumber>;

    seller(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    auctionClosed(overrides?: CallOverrides): Promise<BigNumber>;

    auctionEnd(overrides?: CallOverrides): Promise<BigNumber>;

    auction_winner(overrides?: CallOverrides): Promise<BigNumber>;

    bid(
      _bidAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    erc20TokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    erc721TokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    initialPrice(overrides?: CallOverrides): Promise<BigNumber>;

    seller(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionClosed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auction_winner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bid(
      _bidAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc20TokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc721TokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seller(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
